// Code generated by Umple 1.29.0.4181.a593105a9

digraph "PawnStateMachine" {
  compound = true;
  size="80,10"

  // Class: Quoridor

  // Class: Board

  // Class: Tile

  // Class: User

  // Class: Wall

  // Class: Player

  // Class: Game

  // Class: GamePosition

  // Class: Destination

  // Class: Move

  // Class: StepMove

  // Class: JumpMove

  // Class: WallMove

  // Class: PlayerPosition

  // Class: PawnBehavior

    // Top Level StateMachine: pawnSM
    
    // Start states are shown as a black circle
    node [shape = point, fillcolor="black", width=0.2 ];
    start_PawnBehavior_pawnSM [ tooltip = "Class PawnBehavior, SM pawnSM, State start" ];
    
        
    // Format for normal states
    node [shape = rectangle, width=1,style=rounded];
    
      // State: SM

     subgraph clusterPawnBehavior_pawnSM_SM {
      label = "SM";
      style = rounded;

      // StateMachine: pawnNS
      
      // Start states are shown as a black circle
      node [shape = point, fillcolor="black", width=0.2 ];
      start_PawnBehavior_pawnNS [ tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.start" ];
      
            
      // Format for normal states
      node [shape = rectangle, width=1,style=rounded];
      
        // State: pawnNS

       subgraph clusterPawnBehavior_pawnSMSMPawnNS_pawnNS {
        label = "pawnNS";
        style = rounded;

        // Bottom Level StateMachine: pawnNS
        
        // Start states are shown as a black circle
        node [shape = point, fillcolor="black", width=0.2 ];
        start_PawnBehavior_pawnNS [ tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.start" ];
        
                
        // Format for normal states
        node [shape = rectangle, width=1,style=rounded];
        
          // State: Setup

          PawnBehavior_pawnSMSMPawnNSPawnNS_Setup [label = Setup, tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.Setup"];
          // End State: Setup

          // State: NorthEdge

          PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge [label = NorthEdge, tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.NorthEdge"];
          // End State: NorthEdge

          // State: NorthBorder

          PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder [label = NorthBorder, tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.NorthBorder"];
          // End State: NorthBorder

          // State: NSMiddle

          PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [label = NSMiddle, tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.NSMiddle"];
          // End State: NSMiddle

          // State: SouthEdge

          PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge [label = SouthEdge, tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.SouthEdge"];
          // End State: SouthEdge

          // State: SouthBorder

          PawnBehavior_pawnSMSMPawnNSPawnNS_SouthBorder [label = SouthBorder, tooltip = "Class PawnBehavior, SM pawnSM, State pawnNS.pawnNS.SouthBorder"];
          // End State: SouthBorder
        // End Bottom Level StateMachine: pawnNS
       }
        // End State: pawnNS
      // End StateMachine: pawnNS

      // StateMachine: pawnEW
      
      // Start states are shown as a black circle
      node [shape = point, fillcolor="black", width=0.2 ];
      start_PawnBehavior_pawnEW [ tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.start" ];
      
            
      // Format for normal states
      node [shape = rectangle, width=1,style=rounded];
      
        // State: pawnEW

       subgraph clusterPawnBehavior_pawnSMSMPawnEW_pawnEW {
        label = "pawnEW";
        style = rounded;

        // Bottom Level StateMachine: pawnEW
        
        // Start states are shown as a black circle
        node [shape = point, fillcolor="black", width=0.2 ];
        start_PawnBehavior_pawnEW [ tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.start" ];
        
                
        // Format for normal states
        node [shape = rectangle, width=1,style=rounded];
        
          // State: Setup

          PawnBehavior_pawnSMSMPawnEWPawnEW_Setup [label = Setup, tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.Setup"];
          // End State: Setup

          // State: EastEdge

          PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge [label = EastEdge, tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.EastEdge"];
          // End State: EastEdge

          // State: EastBorder

          PawnBehavior_pawnSMSMPawnEWPawnEW_EastBorder [label = EastBorder, tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.EastBorder"];
          // End State: EastBorder

          // State: EWMiddle

          PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [label = EWMiddle, tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.EWMiddle"];
          // End State: EWMiddle

          // State: WestEdge

          PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge [label = WestEdge, tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.WestEdge"];
          // End State: WestEdge

          // State: WestBorder

          PawnBehavior_pawnSMSMPawnEWPawnEW_WestBorder [label = WestBorder, tooltip = "Class PawnBehavior, SM pawnSM, State pawnEW.pawnEW.WestBorder"];
          // End State: WestBorder
        // End Bottom Level StateMachine: pawnEW
       }
        // End State: pawnEW
      // End StateMachine: pawnEW
     }
      // End State: SM
    // End Top Level StateMachine: pawnSM

  // All transitions
    start_PawnBehavior_pawnSM -> PawnBehavior_pawnSMSMPawnNSPawnNS_Setup [  lhead=clusterPawnBehavior_pawnSM_SM,  tooltip = "start to SM" ] ;
    start_PawnBehavior_pawnNS -> PawnBehavior_pawnSMSMPawnNSPawnNS_Setup [  lhead=clusterPawnBehavior_pawnSMSMPawnNS_pawnNS,  tooltip = "start to pawnNS.pawnNS" ] ;
    start_PawnBehavior_pawnNS -> PawnBehavior_pawnSMSMPawnNSPawnNS_Setup [  tooltip = "start to pawnNS.pawnNS.Setup" ] ;
    PawnBehavior_pawnSMSMPawnNSPawnNS_Setup -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge [  label = "startGame [getPlayer().getGameAsWhite().equals(getCurrentGame())]", tooltip = "From pawnNS.pawnNS.Setup to pawnNS.pawnNS.NorthEdge on startGame&#13;Guard:  [getPlayer().getGameAsWhite().equals(getCurrentGame())]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge [  label = "moveUp / illegalMove();", tooltip = "From pawnNS.pawnNS.NorthEdge to pawnNS.pawnNS.NorthEdge on moveUp&#13;Transition Action:
   illegalMove();" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge [  label = "moveUp [isLegalStep(MoveDirection.North)]", tooltip = "From pawnNS.pawnNS.NorthBorder to pawnNS.pawnNS.NorthEdge on moveUp&#13;Guard:  [isLegalStep(MoveDirection.North)]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge [  label = "moveUp [!((isLegalStep(MoveDirection.North)) && (isLegalJump(MoveDirection.North)) && (getCurrentPawnRow() == 3))]", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.NorthEdge on moveUp&#13;Guard:  [!((isLegalStep(MoveDirection.North)) && (isLegalJump(MoveDirection.North)) && (getCurrentPawnRow() == 3))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder [  label = "moveDown [isLegalStep(MoveDirection.South) && (!(isLegalJump(MoveDirection.South)))]", tooltip = "From pawnNS.pawnNS.NorthEdge to pawnNS.pawnNS.NorthBorder on moveDown&#13;Guard:  [isLegalStep(MoveDirection.South) && (!(isLegalJump(MoveDirection.South)))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder [  label = "moveUp [isLegalStep(MoveDirection.North) && !((isLegalJump(MoveDirection.North)) && (getCurrentPawnRow() == 3))]", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.NorthBorder on moveUp&#13;Guard:  [isLegalStep(MoveDirection.North) && !((isLegalJump(MoveDirection.North)) && (getCurrentPawnRow() == 3))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder [  label = "moveUp [!((isLegalStep(MoveDirection.North)) && (isLegalJump(MoveDirection.North)) && (getCurrentPawnRow() == 4))]", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.NorthBorder on moveUp&#13;Guard:  [!((isLegalStep(MoveDirection.North)) && (isLegalJump(MoveDirection.North)) && (getCurrentPawnRow() == 4))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge -> PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder [  label = "moveUp [isLegalStep(MoveDirection.North) && (!(isLegalJump(MoveDirection.North)))]", tooltip = "From pawnNS.pawnNS.SouthEdge to pawnNS.pawnNS.NorthBorder on moveUp&#13;Guard:  [isLegalStep(MoveDirection.North) && (!(isLegalJump(MoveDirection.North)))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NorthEdge -> PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [  label = "moveDown [!(isLegalStep(MoveDirection.South)) && (isLegalJump(MoveDirection.South))]", tooltip = "From pawnNS.pawnNS.NorthEdge to pawnNS.pawnNS.NSMiddle on moveDown&#13;Guard:  [!(isLegalStep(MoveDirection.South)) && (isLegalJump(MoveDirection.South))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NorthBorder -> PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [  label = "moveDown [isLegalStep(MoveDirection.South) || (isLegalJump(MoveDirection.South))]", tooltip = "From pawnNS.pawnNS.NorthBorder to pawnNS.pawnNS.NSMiddle on moveDown&#13;Guard:  [isLegalStep(MoveDirection.South) || (isLegalJump(MoveDirection.South))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [  label = "moveDown", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.NSMiddle on moveDown" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [  label = "moveUp", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.NSMiddle on moveUp" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge -> PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [  label = "moveUp [!(isLegalStep(MoveDirection.North)) && (isLegalJump(MoveDirection.North))]", tooltip = "From pawnNS.pawnNS.SouthEdge to pawnNS.pawnNS.NSMiddle on moveUp&#13;Guard:  [!(isLegalStep(MoveDirection.North)) && (isLegalJump(MoveDirection.North))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_SouthBorder -> PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle [  label = "moveUp [isLegalStep(MoveDirection.North) || (isLegalJump(MoveDirection.North))]", tooltip = "From pawnNS.pawnNS.SouthBorder to pawnNS.pawnNS.NSMiddle on moveUp&#13;Guard:  [isLegalStep(MoveDirection.North) || (isLegalJump(MoveDirection.North))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_Setup -> PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge [  label = "startGame [getPlayer().getGameAsBlack().equals(getCurrentGame())]", tooltip = "From pawnNS.pawnNS.Setup to pawnNS.pawnNS.SouthEdge on startGame&#13;Guard:  [getPlayer().getGameAsBlack().equals(getCurrentGame())]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge [  label = "moveDown [!((isLegalStep(MoveDirection.South)) && (isLegalJump(MoveDirection.South)) && (getCurrentPawnRow() == 7))]", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.SouthEdge on moveDown&#13;Guard:  [!((isLegalStep(MoveDirection.South)) && (isLegalJump(MoveDirection.South)) && (getCurrentPawnRow() == 7))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge -> PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge [  label = "moveDown / illegalMove();", tooltip = "From pawnNS.pawnNS.SouthEdge to pawnNS.pawnNS.SouthEdge on moveDown&#13;Transition Action:
   illegalMove();" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_SouthBorder -> PawnBehavior_pawnSMSMPawnNSPawnNS_SouthEdge [  label = "moveDown [isLegalStep(MoveDirection.South)]", tooltip = "From pawnNS.pawnNS.SouthBorder to pawnNS.pawnNS.SouthEdge on moveDown&#13;Guard:  [isLegalStep(MoveDirection.South)]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_SouthBorder [  label = "moveDown [isLegalStep(MoveDirection.South) && !((isLegalJump(MoveDirection.South)) && (getCurrentPawnRow() == 7))]", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.SouthBorder on moveDown&#13;Guard:  [isLegalStep(MoveDirection.South) && !((isLegalJump(MoveDirection.South)) && (getCurrentPawnRow() == 7))]" ] ;
  
  PawnBehavior_pawnSMSMPawnNSPawnNS_NSMiddle -> PawnBehavior_pawnSMSMPawnNSPawnNS_SouthBorder [  label = "moveDown [!((isLegalStep(MoveDirection.South)) && (isLegalJump(MoveDirection.South)) && (getCurrentPawnRow() == 6))]", tooltip = "From pawnNS.pawnNS.NSMiddle to pawnNS.pawnNS.SouthBorder on moveDown&#13;Guard:  [!((isLegalStep(MoveDirection.South)) && (isLegalJump(MoveDirection.South)) && (getCurrentPawnRow() == 6))]" ] ;
  
  start_PawnBehavior_pawnEW -> PawnBehavior_pawnSMSMPawnEWPawnEW_Setup [  lhead=clusterPawnBehavior_pawnSMSMPawnEW_pawnEW,  tooltip = "start to pawnEW.pawnEW" ] ;
    start_PawnBehavior_pawnEW -> PawnBehavior_pawnSMSMPawnEWPawnEW_Setup [  tooltip = "start to pawnEW.pawnEW.Setup" ] ;
    PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge -> PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge [  label = "moveRight / illegalMove();", tooltip = "From pawnEW.pawnEW.EastEdge to pawnEW.pawnEW.EastEdge on moveRight&#13;Transition Action:
   illegalMove();" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EastBorder -> PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge [  label = "moveRight [isLegalStep(MoveDirection.East)]", tooltip = "From pawnEW.pawnEW.EastBorder to pawnEW.pawnEW.EastEdge on moveRight&#13;Guard:  [isLegalStep(MoveDirection.East)]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge [  label = "moveRight [!((isLegalStep(MoveDirection.East)) && (isLegalJump(MoveDirection.East)) && (getCurrentPawnRow() == 7))]", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.EastEdge on moveRight&#13;Guard:  [!((isLegalStep(MoveDirection.East)) && (isLegalJump(MoveDirection.East)) && (getCurrentPawnRow() == 7))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge -> PawnBehavior_pawnSMSMPawnEWPawnEW_EastBorder [  label = "moveLeft [isLegalStep(MoveDirection.West) && (!(isLegalJump(MoveDirection.West)))]", tooltip = "From pawnEW.pawnEW.EastEdge to pawnEW.pawnEW.EastBorder on moveLeft&#13;Guard:  [isLegalStep(MoveDirection.West) && (!(isLegalJump(MoveDirection.West)))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_EastBorder [  label = "moveRight [isLegalStep(MoveDirection.East) && !((isLegalJump(MoveDirection.East)) && (getCurrentPawnRow() == 7))]", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.EastBorder on moveRight&#13;Guard:  [isLegalStep(MoveDirection.East) && !((isLegalJump(MoveDirection.East)) && (getCurrentPawnRow() == 7))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_EastBorder [  label = "moveRight [!((isLegalStep(MoveDirection.East)) && (isLegalJump(MoveDirection.East)) && (getCurrentPawnRow() == 6))]", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.EastBorder on moveRight&#13;Guard:  [!((isLegalStep(MoveDirection.East)) && (isLegalJump(MoveDirection.East)) && (getCurrentPawnRow() == 6))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_Setup -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "startGame", tooltip = "From pawnEW.pawnEW.Setup to pawnEW.pawnEW.EWMiddle on startGame" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EastEdge -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "moveLeft [!(isLegalStep(MoveDirection.West)) && (isLegalJump(MoveDirection.West))]", tooltip = "From pawnEW.pawnEW.EastEdge to pawnEW.pawnEW.EWMiddle on moveLeft&#13;Guard:  [!(isLegalStep(MoveDirection.West)) && (isLegalJump(MoveDirection.West))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EastBorder -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "moveLeft [isLegalStep(MoveDirection.West) || (isLegalJump(MoveDirection.West))]", tooltip = "From pawnEW.pawnEW.EastBorder to pawnEW.pawnEW.EWMiddle on moveLeft&#13;Guard:  [isLegalStep(MoveDirection.West) || (isLegalJump(MoveDirection.West))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "moveLeft", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.EWMiddle on moveLeft" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "moveRight", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.EWMiddle on moveRight" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "moveRight [!(isLegalStep(MoveDirection.East)) && (isLegalJump(MoveDirection.East))]", tooltip = "From pawnEW.pawnEW.WestEdge to pawnEW.pawnEW.EWMiddle on moveRight&#13;Guard:  [!(isLegalStep(MoveDirection.East)) && (isLegalJump(MoveDirection.East))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_WestBorder -> PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle [  label = "moveRight [isLegalStep(MoveDirection.East) || (isLegalJump(MoveDirection.East))]", tooltip = "From pawnEW.pawnEW.WestBorder to pawnEW.pawnEW.EWMiddle on moveRight&#13;Guard:  [isLegalStep(MoveDirection.East) || (isLegalJump(MoveDirection.East))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge [  label = "moveLeft [!((isLegalStep(MoveDirection.West)) && (isLegalJump(MoveDirection.West)) && (getCurrentPawnRow() == 3))]", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.WestEdge on moveLeft&#13;Guard:  [!((isLegalStep(MoveDirection.West)) && (isLegalJump(MoveDirection.West)) && (getCurrentPawnRow() == 3))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge -> PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge [  label = "moveLeft / illegalMove();", tooltip = "From pawnEW.pawnEW.WestEdge to pawnEW.pawnEW.WestEdge on moveLeft&#13;Transition Action:
   illegalMove();" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_WestBorder -> PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge [  label = "moveLeft [isLegalStep(MoveDirection.West)]", tooltip = "From pawnEW.pawnEW.WestBorder to pawnEW.pawnEW.WestEdge on moveLeft&#13;Guard:  [isLegalStep(MoveDirection.West)]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_WestBorder [  label = "moveLeft [isLegalStep(MoveDirection.West) && !((isLegalJump(MoveDirection.West)) && (getCurrentPawnRow() == 3))]", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.WestBorder on moveLeft&#13;Guard:  [isLegalStep(MoveDirection.West) && !((isLegalJump(MoveDirection.West)) && (getCurrentPawnRow() == 3))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_EWMiddle -> PawnBehavior_pawnSMSMPawnEWPawnEW_WestBorder [  label = "moveLeft [!((isLegalStep(MoveDirection.West)) && (isLegalJump(MoveDirection.West)) && (getCurrentPawnRow() == 4))]", tooltip = "From pawnEW.pawnEW.EWMiddle to pawnEW.pawnEW.WestBorder on moveLeft&#13;Guard:  [!((isLegalStep(MoveDirection.West)) && (isLegalJump(MoveDirection.West)) && (getCurrentPawnRow() == 4))]" ] ;
  
  PawnBehavior_pawnSMSMPawnEWPawnEW_WestEdge -> PawnBehavior_pawnSMSMPawnEWPawnEW_WestBorder [  label = "moveRight [isLegalStep(MoveDirection.East) && (!(isLegalJump(MoveDirection.East)))]", tooltip = "From pawnEW.pawnEW.WestEdge to pawnEW.pawnEW.WestBorder on moveRight&#13;Guard:  [isLegalStep(MoveDirection.East) && (!(isLegalJump(MoveDirection.East)))]" ] ;
  

}
