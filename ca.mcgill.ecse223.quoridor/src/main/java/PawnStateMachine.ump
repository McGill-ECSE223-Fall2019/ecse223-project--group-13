namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;

	pawnSM {
		pawnNS {
			Setup {
				startGame [getPlayer.getGameAsWhite.equals(getCurrentGame())] -> NorthEdge;
				startGame [getPlayer.getGameAsBlack.equals(getCurrentGame())] -> SouthEdge;
			}
			NorthEdge {
				moveUp / -> { illegalMove(); } NorthEdge;
				moveDown [isLegalStep(MoveDirection.South)&&!(isLegalJump(MoveDirection.South))] -> NorthBorder;
				moveDown [!isLegalStep(MoveDirection.South)&&(isLegalJump(MoveDirection.South))] -> NSMiddle;
				
			}
			NorthBorder {
				moveUp [isLegalStep(MoveDirection.North)] -> NorthEdge;
				moveDown [isLegalStep(MoveDirection.South)&&!(isLegalJump(MoveDirection.South))] -> NSMiddle;
				moveDown [!(isLegalStep(MoveDirection.South))&&(isLegalJump(MoveDirection.South))] -> NSMiddle;
			}
			NSMiddle {
				moveDown [isLegalStep(MoveDirection.South)&&!(isLegalJump(MoveDirection.South))] -> NSMiddle;
				moveDown [!(isLegalStep(MoveDirection.South))&&(isLegalJump(MoveDirection.South))] -> NSMiddle;
				
			}
			SouthEdge {
			
			}
			SouthBorder {
			
			}
		}
		||
		pawnEW {
			Setup {
				startGame -> EWMiddle;
			}
			EastEdge {
			
			}
			EastBorder {
			
			}
			EWMiddle {
			
			}
			WestEdge {
			
			}
			WestBorder {
			
			}
		}
	
	
	}

    // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North; }
}
