namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;

    	pawnSM {
		SM {
			pawnNS {
				Setup {
					startGame [getPlayer().getGameAsWhite().equals(getCurrentGame())] -> NorthEdge;
					startGame [getPlayer().getGameAsBlack().equals(getCurrentGame())] -> SouthEdge;
				}
				NorthEdge {
					moveUp -> / { illegalMove(); } NorthEdge;
					moveDown [isLegalStep(MoveDirection.South)] -> NorthBorder;
					moveDown [(isLegalJump(MoveDirection.South))] -> NSMiddle;
					moveUpRight -> / { illegalMove(); } NorthEdge;
					moveUpLeft -> / { illegalMove(); } NorthEdge;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> NorthBorder;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> NorthBorder;

				}
				NorthBorder {
					moveUp [isLegalStep(MoveDirection.North)] -> NorthEdge;
					moveDown [isLegalStep(MoveDirection.South)||(isLegalJump(MoveDirection.South))] -> NSMiddle;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> NorthEdge;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> NorthEdge;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> NSMiddle;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> NSMiddle;
				}
				NSMiddle {
					moveDown [isLegalStep(MoveDirection.South)&&(getCurrentPawnRow() == 7)] -> SouthBorder;
					moveDown [(isLegalJump(MoveDirection.South))&&(getCurrentPawnRow() == 6)] -> SouthBorder;
					moveDown [(isLegalJump(MoveDirection.South))&&(getCurrentPawnRow() == 7)] -> SouthEdge;
					moveDown -> NSMiddle;
					moveUp [isLegalStep(MoveDirection.North)&&(getCurrentPawnRow() == 3)] -> NorthBorder;
					moveUp [(isLegalJump(MoveDirection.North))&&(getCurrentPawnRow() == 4)] -> NorthBorder;
					moveUp [(isLegalJump(MoveDirection.North))&&(getCurrentPawnRow() == 3)] -> NorthEdge;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))&&(getCurrentPawnRow() == 3)] -> NorthBorder;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))&&(getCurrentPawnRow() == 3)] -> NorthBorder;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))&&(getCurrentPawnRow() == 7)] -> SouthBorder;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))&&(getCurrentPawnRow() == 7)] -> SouthBorder;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> NSMiddle;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> NSMiddle;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> NSMiddle;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> NSMiddle;
					moveUp -> NSMiddle;
				}
				SouthEdge {
					moveDown -> / { illegalMove(); } SouthEdge;
					moveUp [isLegalStep(MoveDirection.North)] -> SouthBorder;
					moveUp [(isLegalJump(MoveDirection.North))] -> NSMiddle;
					moveDownRight -> / { illegalMove(); } SouthEdge;
					moveDownLeft -> / { illegalMove(); } SouthEdge;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> SouthBorder;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> SouthBorder;
				}
				SouthBorder {
					moveDown [isLegalStep(MoveDirection.South)] -> SouthEdge;
					moveUp [isLegalStep(MoveDirection.North)||(isLegalJump(MoveDirection.North))] -> NSMiddle;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> NSMiddle;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> NSMiddle;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> SouthEdge;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> SouthEdge;
				}
			}
			||
			pawnEW {
				Setup {
					startGame -> EWMiddle;
				}
				EastEdge {
					moveRight -> / { illegalMove(); } EastEdge;
					moveLeft [isLegalStep(MoveDirection.West)] -> EastBorder;
					moveLeft [(isLegalJump(MoveDirection.West))] -> EWMiddle;
					moveUpRight -> / { illegalMove(); } EastEdge;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> EastBorder;
					moveDownRight -> / { illegalMove(); } EastEdge;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> EastBorder;
				}
				EastBorder {
					moveRight [isLegalStep(MoveDirection.East)] -> EastEdge;
					moveLeft [isLegalStep(MoveDirection.West)||(isLegalJump(MoveDirection.West))] -> EWMiddle;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> EastEdge;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> EWMiddle;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> EastEdge;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> EWMiddle;
				}
				EWMiddle {
					moveLeft [isLegalStep(MoveDirection.West)&&(getCurrentPawnColumn() == 3)] -> WestBorder;
					moveLeft [(isLegalJump(MoveDirection.West))&&(getCurrentPawnColumn() == 4)] -> WestBorder;
					moveLeft [(isLegalJump(MoveDirection.West))&&(getCurrentPawnColumn() == 3)] -> WestEdge;
					moveLeft -> EWMiddle;
					moveRight [isLegalStep(MoveDirection.East)&&(getCurrentPawnColumn() == 7)] -> EastBorder;
					moveRight [(isLegalJump(MoveDirection.East))&&(getCurrentPawnColumn() == 6)] -> EastBorder;
					moveRight [(isLegalJump(MoveDirection.East))&&(getCurrentPawnColumn() == 7)] -> EastEdge;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))&&(getCurrentPawnColumn() == 7)] -> EastBorder;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))&&(getCurrentPawnColumn() == 3)] -> WestBorder;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))&&(getCurrentPawnColumn() == 7)] -> EastBorder;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))&&(getCurrentPawnColumn() == 3)] -> WestBorder;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> EWMiddle;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> EWMiddle;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> EWMiddle;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> EWMiddle;
					moveRight -> EWMiddle;
				}
				WestEdge {
					moveLeft -> / { illegalMove(); } WestEdge;
					moveRight [isLegalStep(MoveDirection.East)] -> WestBorder;
					moveRight [(isLegalJump(MoveDirection.East))] -> EWMiddle;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> WestBorder;
					moveUpLeft -> / { illegalMove(); } WestEdge;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> WestBorder;
					moveDownLeft -> / { illegalMove(); } WestEdge;
				}
				WestBorder {
					moveLeft [isLegalStep(MoveDirection.West)] -> WestEdge;
					moveRight [isLegalStep(MoveDirection.East)||(isLegalJump(MoveDirection.East))] -> EWMiddle;
					moveUpRight [(isLegalJump(MoveDirection.NorthEast))] -> EWMiddle;
					moveUpLeft [(isLegalJump(MoveDirection.NorthWest))] -> SouthEdge;
					moveDownRight [(isLegalJump(MoveDirection.SouthEast))] -> EWMiddle;
					moveDownLeft [(isLegalJump(MoveDirection.SouthWest))] -> SouthEdge;
				}
			}
		}
	}

    // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North, NorthWest, NorthEast, SouthWest, SouthEast; }
}
